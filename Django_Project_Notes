
____________________________________________________________________________________________________________
Django Set-up.
_____________________
    1. Set-up new repo in Git pod with Template.
    2. Install django. > pip3 install django
    3 start django project > django-admin startproject project_name . (space dot at the end)
    4. Updated gitignore
    5. Run the server to check it works
        > python3 manage.py runserver
    6. Update the migarations. 
        > python3 manage.py migrate
    7. Create a super user.
        > python3 manage.py createsuperuser
            username / e-mail / password.

    Push to Git.
____________________________________________________________________________________________________________
Set-up Autentication. 
_____________________
    Django package - allauth (https://django-allauth.readthedocs.io/en/latest/installation.html)

    1. Install package
    > pip3 install django-allauth==0.41.0 (package used in walkthrougg project)

    2. From the Allauth site, update the requried data into the settings.py
        i. AUTHENTICATION_BACKENDS
        ii. get 'django.template.context_processors.request' if not already in the template
        iii. Update INSTALLED_APPS
            'django.contrib.auth',
            'django.contrib.messages',
            'django.contrib.sites',
            'allauth',
            'allauth.account',
            'allauth.socialaccount',
        iv. Add "SITE_ID = 1" under the AUTHENTICATION_BACKENDS section.

    3. Update the url.py file
        > path('accounts/', include('allauth.urls')), (new path)
        > imprort include

    4. Run: migrage

    5. Launch the site. add /admin to the url and log in with the super user ID. 

    6. After logging in, got to sites.
        Update the domain to project_name.example.com
            chnage display name to project_ name (critical for socail media auth)

    7 Add addtional lines to settings.py    
        MAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  (sends confirmation mauls to console)

        ACCOUNT_AUTHENTICATION_METHOD = 'username_email'        (allow autentication with e-mail or userIDs)
        ACCOUNT_EMAIL_REQUIRED = True
        ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
        ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
        ACCOUNT_USERNAME_MIN_LENGTH = 4
        LOGIN_URL = '/accounts/login/'
        LOGIN_REDIRECT_URL = '/'

    8. Test the set-up. Run the server.
        Navigate to /accounts/login. 

    9. To confirm the super user e-mail set-up earlier, caccess it under the Admin section. 
            Set to Promary & Confirmed. 

    10. Create requirements.txt
        pip freeze > requirements.txt

    11. set-up the templates directory
        > mkdir templates
        > mkdir templates/allauth

    12. Commit chnages to git
____________________________________________________________________________________________________________
Set-up for Custom Front end 
_____________________

    1. Create a copy of the all auth templates in our templates directory.
        templates/allauth
        > cp -r ../.pip-modules/lib/python3.8/site-packages/allauth/templates/* ./templates/allauth
        remove any templates, not being customised, so they default back to the allauth templates,
        In this case, remove openid & tests

    2. Create a base.html template in the templates level folder. 

    3. Get a template from bootstrap for the base.html file. 
            https://getbootstrap.com/docs/4.4/getting-started/introduction/#starter-template
        Add:
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        Removed unnecessary comments. 

        move scripts to the top of the file. 

        add {% load static %} to the top of the base.html file. 

    4. Add wrappers to the content in the template {%  %} - see file for details. 

    5. Push to git.

____________________________________________________________________________________________________________
Create an App (Home App)
_____________________
> python3 manage.py startapp home

1. Within the home app folder, 
    create a templates folder, 
        with home folder in it 
            and an indxe.html file in there
    /home/template/home/indxe.html

2. add the block contente to the index.html

3. updated views.py with a view for the index.html page.

4. create a new urls.py file in the home app. 
    use the project level urls.py file to copy the boilerplate details. 

5 Update the urls file in the home app.
    update the project level urls.py file with the home app link. 

6. in settins, add the home app to installed apps.
7. add the templates to the templates section if the file.  (import os)
____________________________________________________________________________________________________________
Settin up Static URLs in settinsg.py
_____________________
1. In the settings.py file. 
add (at the end of the file)
    STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

2. update the project level URLs. 
____________________________________________________________________________________________________________

_____________________

____________________________________________________________________________________________________________

_____________________