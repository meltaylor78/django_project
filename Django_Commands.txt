
Create and App:
    > python3 manage.py startapp app_name

    Note : after creating a new app, it needs to be added to the install apps in setting.py.

Test Create Migrations (dry run)
    > python3 manage.py makemigrations --dry-run

Create  Migrations
    > python3 manage.py makemigrations

Test Migrations - Plan (test it)
    > python3 manage.py migrate --plan

Run Migrations
    > python3 manage.py migrate  (note you should specifi the app name to avoid migrating other apps)

Commands for Managing Content in the DB. 
    > python3 manage.py shell
    Can be used to get into a terminal and run python code. 
    You can import any of the functions from the project.

Example. 
    from products.models import Product    // Import the products

    kdbb = ['kitchen_dining', 'bed_bath'] // var with non-clothes items

    clothes = Product.objects.exclude(category__name__in=kdbb) // makes a list of clothes in the DB by excluding kithcing_dining & bed_bath categories

    clothes.count()  // prints a count of the products in the clothes category created above. 

    Loop to updated the clothes to set the has_size field to True

       for item in clothes:
           item.has_sizes = True
           item.save()
    updates all the items in clothes to set the flag to True,

    To verifiy 

    Product.objects.filter(has_sizes=True) // get a list of the products has_sizes set to true
    Product.objects.filter(has_sizes=True).count() // get a count of the products that has_sizes set to true
 exit // to exit the shell

 Load Data to Django DB. 
    From a Fixtures folder. In Json format.

    > manage.py loaddata <fixturename>, where <fixturename> is the name of the fixture file youâ€™ve created. 

Cripspy Forms 
    > pip3 install django-crispy-forms   (add to installed apps in stettings.py)

    Updated settins.py to tell it which template to use. 

    CRISPY_TEMPLATE_PACK = 'bootstrap4'

    Still in settings.py, add the requirments under content processors

    'builtins': [
                'crispy_forms.templatetags.crispy_forms_tags',
                'crispy_forms.templatetags.crispy_forms_field',
            ],
    
Stripe Payments
    > pip3 install stripe

Django Countries Packages
    > pip3 install django-countrie

Add the country to the models.py with,
    from django_countries.fields import CountryField

In models.py set-up the form to use the country fields list 
    country = CountryField(blank_label= 'County *f', null=False, blank=False)

    Note: Migarate the changes. 

Setting Up Heroku.
    Create new app.
    Enable postgres Db in Heroku (under settingsa)

In gitod install;
    > pip3 install dj_database_url
    > pip3 install psycopg2-binary
Freeze the requirmemnts..
    > pip3 freeze requirements.txt

Import in the settings file 
 > import dj_database_url

Comment out the default DB information and updated with;

DATABASE = {
    'default': dj_database_url.parse('get this url from the settings section in Heroku')
    }

Migrate to the new DB, 
    > python3 manage.py showmigrations (to see the migrations)
    > python3 manage.py showmigrations  (to migrate the DB)

Import the Data 
    > python3 manage.py loaddata categories
    > python3 manage.py loaddata categories

Create a super user on the new DB
    > python3 manage.py create superuser

Install web server and freez requirements
    > pip3 install gunicorn
    > pip3 freeze requirements.txt

Create a Procfile (no extension)

Add the heroku link to the settings file as an allowed host
    ALLOWED_HOSTS = ['django-walkthrough-project.herokuapp.com' 'localhost']

On the Heroku App. 
    Go to the deploy tab.
    add the Git repo. 
    Set to auto deploy  
    then deploy (bottom of the page)

Updated the secret Key.
use

    use a Django secret key generater to get a new key  
    add to Heroku "SECRET_KEY
Updated settings file as:
    SECRET_KEY = os.environ.get('SECRET_KEY', '')
and set-up Debug as ;
    DEBUG = 'DEVELOPMENT' in os.environ