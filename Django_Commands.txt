
Create and App:
    > python3 manage.py startapp app_name

    Note : after creating a new app, it needs to be added to the install apps in setting.py.

Test Create Migrations (dry run)
    > python3 manage.py makemigrations --dry-run

Create  Migrations
    > python3 manage.py makemigrations

Test Migrations - Plan (test it)
    > python3 manage.py migrate --plan

Run Migrations
    > python3 manage.py migrate  (note you should specifi the app name to avoid migrating other apps)

Commands for Managing Content in the DB. 
    > python3 manage.py shell
    Can be used to get into a terminal and run python code. 
    You can import any of the functions from the project.

Example. 
    from products.models import Product    // Import the products

    kdbb = ['kitchen_dining', 'bed_bath'] // var with non-clothes items

    clothes = Product.objects.exclude(category__name__in=kdbb) // makes a list of clothes in the DB by excluding kithcing_dining & bed_bath categories

    clothes.count()  // prints a count of the products in the clothes category created above. 

    Loop to updated the clothes to set the has_size field to True

       for item in clothes:
           item.has_sizes = True
           item.save()
    updates all the items in clothes to set the flag to True,

    To verifiy 

    Product.objects.filter(has_sizes=True) // get a list of the products has_sizes set to true
    Product.objects.filter(has_sizes=True).count() // get a count of the products that has_sizes set to true
 exit // to exit the shell

 Load Data to Django DB. 
    From a Fixtures folder. In Json format.

    > manage.py loaddata <fixturename>, where <fixturename> is the name of the fixture file youâ€™ve created. 

Cripspy Forms 
    > pip3 install django-crispy-forms   (add to installed apps in stettings.py)

    Updated settins.py to tell it which template to use. 

    CRISPY_TEMPLATE_PACK = 'bootstrap4'

    Still in settings.py, add the requirments under content processors

    'builtins': [
                'crispy_forms.templatetags.crispy_forms_tags',
                'crispy_forms.templatetags.crispy_forms_field',
            ],
    
Stripe Payments
    > pip3 install stripe

Django Countries Packages
    > pip3 install django-countrie

Add the country to the models.py with,
    from django_countries.fields import CountryField

In models.py set-up the form to use the country fields list 
    country = CountryField(blank_label= 'County *f', null=False, blank=False)

    Note: Migarate the changes. 

